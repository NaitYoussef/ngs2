{"version":3,"sources":["webpack:///main.12fd3cd47d932f56877a.js","webpack:///./src/index.js","webpack:///./src/api/userApi.js","webpack:///./~/whatwg-fetch/fetch.js","webpack:///./src/api/baseUrl.js","webpack:///./~/numeral/numeral.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_interopRequireDefault","obj","__esModule","default","_userApi","_numeral","_numeral2","courseValue","format","console","log","getUsers","then","result","usersBody","forEach","user","id","firstName","lastName","email","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","Array","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","row","parentNode","removeChild","call","this","get","del","url","request","Request","baseUrl","method","fetch","onSuccess","onError","error","response","json","Object","defineProperty","value","_baseUrl","_baseUrl2","self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","map","append","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","set","type","rejected","text","decode","JSON","parse","normalizeMethod","upcased","toUpperCase","methods","indexOf","input","options","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","status","ok","statusText","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","keys","entries","clone","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill","getBaseUrl","getQueryStringParameterByName","window","href","regex","RegExp","results","exec","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Numeral","number","_value","toFixed","precision","roundingFunction","optionals","optionalsRegExp","output","power","Math","pow","formatNumeral","n","formatCurrency","formatPercentage","formatTime","formatNumber","unformatNumeral","string","thousandRegExp","millionRegExp","billionRegExp","trillionRegExp","stringOriginal","suffixes","bytesMultiplier","unformatTime","zeroFormat","languages","currentLanguage","delimiters","decimal","abbreviations","thousand","currency","symbol","million","billion","trillion","length","match","min","Number","ceil","spliceIndex","symbolIndex","openParenIndex","minusSignIndex","space","splice","hours","floor","minutes","seconds","round","timeArray","max","w","thousands","negP","signed","optDec","abbr","abbrK","abbrM","abbrB","abbrT","abbrForce","ord","abs","d","neg","slice","ordinal","loadLanguage","multiplier","x","parts","correctionFactor","args","arguments","reduce","prev","mp","mn","Infinity","numeral","VERSION","defaultFormat","hasModule","isNumeral","fn","unformat","version","language","languageData","b","opt_initialValue","index","isValueSet","inputString","valueOf","add","cback","accum","curr","currI","O","corrFactor","subtract","multiply","divide","difference","ender","apply"],"mappings":"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","file":"main.12fd3cd47d932f56877a.js","sourcesContent":["webpackJsonp([0,1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\t__webpack_require__(1);\n\t\n\tvar _userApi = __webpack_require__(3);\n\t\n\tvar _numeral = __webpack_require__(6);\n\t\n\tvar _numeral2 = _interopRequireDefault(_numeral);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar courseValue = (0, _numeral2.default)(1000).format('$0,0.00');\n\tconsole.log('I would play ' + courseValue + ' from this awesome course!'); //eslint-disable-line no-console\n\t(0, _userApi.getUsers)().then(function (result) {\n\t  var usersBody = \"\";\n\t  result.forEach(function (user) {\n\t    usersBody += '<tr>\\n        <td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n        <td>' + user.id + '</td>\\n        <td>' + user.firstName + '</td>\\n        <td>' + user.lastName + '</td>\\n        <td>' + user.email + '</td>\\n        <td></td>\\n      </tr>';\n\t  });\n\t\n\t  global.document.getElementById('users').innerHTML = usersBody;\n\t\n\t  var deleteLinks = global.document.getElementsByClassName('deleteUser');\n\t\n\t  Array.from(deleteLinks, function (link) {\n\t    link.onclick = function (event) {\n\t      var element = event.target;\n\t      event.preventDefault();\n\t      (0, _userApi.deleteUser)(element.attributes[\"date-id\"]);\n\t      var row = element.parentNode.parentNode;\n\t      row.parentNode.removeChild(row);\n\t    };\n\t  });\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getUsers = getUsers;\n\texports.deleteUser = deleteUser;\n\t\n\t__webpack_require__(4);\n\t\n\tvar _baseUrl = __webpack_require__(5);\n\t\n\tvar _baseUrl2 = _interopRequireDefault(_baseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar baseUrl = (0, _baseUrl2.default)();\n\t\n\tfunction getUsers() {\n\t  return get('users');\n\t}\n\tfunction deleteUser(id) {\n\t  return del('users/' + id);\n\t}\n\t\n\tfunction del(url) {\n\t  var request = new Request(baseUrl + url, {\n\t    method: 'DELETE'\n\t  });\n\t  return fetch(request).then(onSuccess, onError);\n\t}\n\t\n\tfunction get(url) {\n\t  return fetch(baseUrl + url).then(onSuccess, onError);\n\t}\n\t\n\tfunction onError(error) {\n\t  console.log(error);\n\t}\n\t\n\tfunction onSuccess(response) {\n\t  return response.json();\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBaseUrl;\n\tfunction getBaseUrl() {\n\t  return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\n\t}\n\t\n\tfunction getQueryStringParameterByName(name, url) {\n\t  if (!url) url = window.location.href;\n\t  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n\t  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n\t      results = regex.exec(url);\n\t  if (!results) return null;\n\t  if (!results[2]) return '';\n\t  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * numeral.js\n\t * version : 1.5.3\n\t * author : Adam Draper\n\t * license : MIT\n\t * http://adamwdraper.github.com/Numeral-js/\n\t */\n\t\n\t(function () {\n\t\n\t    /************************************\n\t        Constants\n\t    ************************************/\n\t\n\t    var numeral,\n\t        VERSION = '1.5.3',\n\t        // internal storage for language config files\n\t        languages = {},\n\t        currentLanguage = 'en',\n\t        zeroFormat = null,\n\t        defaultFormat = '0,0',\n\t        // check for nodeJS\n\t        hasModule = (typeof module !== 'undefined' && module.exports);\n\t\n\t\n\t    /************************************\n\t        Constructors\n\t    ************************************/\n\t\n\t\n\t    // Numeral prototype object\n\t    function Numeral (number) {\n\t        this._value = number;\n\t    }\n\t\n\t    /**\n\t     * Implementation of toFixed() that treats floats more like decimals\n\t     *\n\t     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n\t     * problems for accounting- and finance-related software.\n\t     */\n\t    function toFixed (value, precision, roundingFunction, optionals) {\n\t        var power = Math.pow(10, precision),\n\t            optionalsRegExp,\n\t            output;\n\t            \n\t        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n\t        // Multiply up by precision, round accurately, then divide and use native toFixed():\n\t        output = (roundingFunction(value * power) / power).toFixed(precision);\n\t\n\t        if (optionals) {\n\t            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n\t            output = output.replace(optionalsRegExp, '');\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    /************************************\n\t        Formatting\n\t    ************************************/\n\t\n\t    // determine what type of formatting we need to do\n\t    function formatNumeral (n, format, roundingFunction) {\n\t        var output;\n\t\n\t        // figure out what kind of format we are dealing with\n\t        if (format.indexOf('$') > -1) { // currency!!!!!\n\t            output = formatCurrency(n, format, roundingFunction);\n\t        } else if (format.indexOf('%') > -1) { // percentage\n\t            output = formatPercentage(n, format, roundingFunction);\n\t        } else if (format.indexOf(':') > -1) { // time\n\t            output = formatTime(n, format);\n\t        } else { // plain ol' numbers or bytes\n\t            output = formatNumber(n._value, format, roundingFunction);\n\t        }\n\t\n\t        // return string\n\t        return output;\n\t    }\n\t\n\t    // revert to number\n\t    function unformatNumeral (n, string) {\n\t        var stringOriginal = string,\n\t            thousandRegExp,\n\t            millionRegExp,\n\t            billionRegExp,\n\t            trillionRegExp,\n\t            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n\t            bytesMultiplier = false,\n\t            power;\n\t\n\t        if (string.indexOf(':') > -1) {\n\t            n._value = unformatTime(string);\n\t        } else {\n\t            if (string === zeroFormat) {\n\t                n._value = 0;\n\t            } else {\n\t                if (languages[currentLanguage].delimiters.decimal !== '.') {\n\t                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n\t                }\n\t\n\t                // see if abbreviations are there so that we can multiply to the correct number\n\t                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t\n\t                // see if bytes are there so that we can multiply to the correct number\n\t                for (power = 0; power <= suffixes.length; power++) {\n\t                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\t\n\t                    if (bytesMultiplier) {\n\t                        break;\n\t                    }\n\t                }\n\t\n\t                // do some math to create our number\n\t                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\t\n\t                // round if we are talking about bytes\n\t                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n\t            }\n\t        }\n\t        return n._value;\n\t    }\n\t\n\t    function formatCurrency (n, format, roundingFunction) {\n\t        var symbolIndex = format.indexOf('$'),\n\t            openParenIndex = format.indexOf('('),\n\t            minusSignIndex = format.indexOf('-'),\n\t            space = '',\n\t            spliceIndex,\n\t            output;\n\t\n\t        // check for space before or after currency\n\t        if (format.indexOf(' $') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' $', '');\n\t        } else if (format.indexOf('$ ') > -1) {\n\t            space = ' ';\n\t            format = format.replace('$ ', '');\n\t        } else {\n\t            format = format.replace('$', '');\n\t        }\n\t\n\t        // format the number\n\t        output = formatNumber(n._value, format, roundingFunction);\n\t\n\t        // position the symbol\n\t        if (symbolIndex <= 1) {\n\t            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n\t                output = output.split('');\n\t                spliceIndex = 1;\n\t                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n\t                    // the symbol appears before the \"(\" or \"-\"\n\t                    spliceIndex = 0;\n\t                }\n\t                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n\t                output = output.join('');\n\t            } else {\n\t                output = languages[currentLanguage].currency.symbol + space + output;\n\t            }\n\t        } else {\n\t            if (output.indexOf(')') > -1) {\n\t                output = output.split('');\n\t                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n\t                output = output.join('');\n\t            } else {\n\t                output = output + space + languages[currentLanguage].currency.symbol;\n\t            }\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatPercentage (n, format, roundingFunction) {\n\t        var space = '',\n\t            output,\n\t            value = n._value * 100;\n\t\n\t        // check for space before %\n\t        if (format.indexOf(' %') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' %', '');\n\t        } else {\n\t            format = format.replace('%', '');\n\t        }\n\t\n\t        output = formatNumber(value, format, roundingFunction);\n\t        \n\t        if (output.indexOf(')') > -1 ) {\n\t            output = output.split('');\n\t            output.splice(-1, 0, space + '%');\n\t            output = output.join('');\n\t        } else {\n\t            output = output + space + '%';\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatTime (n) {\n\t        var hours = Math.floor(n._value/60/60),\n\t            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n\t            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n\t        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n\t    }\n\t\n\t    function unformatTime (string) {\n\t        var timeArray = string.split(':'),\n\t            seconds = 0;\n\t        // turn hours and minutes into seconds and add them all up\n\t        if (timeArray.length === 3) {\n\t            // hours\n\t            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[1]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[2]);\n\t        } else if (timeArray.length === 2) {\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[0]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[1]);\n\t        }\n\t        return Number(seconds);\n\t    }\n\t\n\t    function formatNumber (value, format, roundingFunction) {\n\t        var negP = false,\n\t            signed = false,\n\t            optDec = false,\n\t            abbr = '',\n\t            abbrK = false, // force abbreviation to thousands\n\t            abbrM = false, // force abbreviation to millions\n\t            abbrB = false, // force abbreviation to billions\n\t            abbrT = false, // force abbreviation to trillions\n\t            abbrForce = false, // force abbreviation\n\t            bytes = '',\n\t            ord = '',\n\t            abs = Math.abs(value),\n\t            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n\t            min,\n\t            max,\n\t            power,\n\t            w,\n\t            precision,\n\t            thousands,\n\t            d = '',\n\t            neg = false;\n\t\n\t        // check if number is zero and a custom zero format has been set\n\t        if (value === 0 && zeroFormat !== null) {\n\t            return zeroFormat;\n\t        } else {\n\t            // see if we should use parentheses for negative number or if we should prefix with a sign\n\t            // if both are present we default to parentheses\n\t            if (format.indexOf('(') > -1) {\n\t                negP = true;\n\t                format = format.slice(1, -1);\n\t            } else if (format.indexOf('+') > -1) {\n\t                signed = true;\n\t                format = format.replace(/\\+/g, '');\n\t            }\n\t\n\t            // see if abbreviation is wanted\n\t            if (format.indexOf('a') > -1) {\n\t                // check if abbreviation is specified\n\t                abbrK = format.indexOf('aK') >= 0;\n\t                abbrM = format.indexOf('aM') >= 0;\n\t                abbrB = format.indexOf('aB') >= 0;\n\t                abbrT = format.indexOf('aT') >= 0;\n\t                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\t\n\t                // check for space before abbreviation\n\t                if (format.indexOf(' a') > -1) {\n\t                    abbr = ' ';\n\t                    format = format.replace(' a', '');\n\t                } else {\n\t                    format = format.replace('a', '');\n\t                }\n\t\n\t                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n\t                    // trillion\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n\t                    value = value / Math.pow(10, 12);\n\t                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n\t                    // billion\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n\t                    value = value / Math.pow(10, 9);\n\t                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n\t                    // million\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n\t                    value = value / Math.pow(10, 6);\n\t                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n\t                    // thousand\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n\t                    value = value / Math.pow(10, 3);\n\t                }\n\t            }\n\t\n\t            // see if we are formatting bytes\n\t            if (format.indexOf('b') > -1) {\n\t                // check for space before\n\t                if (format.indexOf(' b') > -1) {\n\t                    bytes = ' ';\n\t                    format = format.replace(' b', '');\n\t                } else {\n\t                    format = format.replace('b', '');\n\t                }\n\t\n\t                for (power = 0; power <= suffixes.length; power++) {\n\t                    min = Math.pow(1024, power);\n\t                    max = Math.pow(1024, power+1);\n\t\n\t                    if (value >= min && value < max) {\n\t                        bytes = bytes + suffixes[power];\n\t                        if (min > 0) {\n\t                            value = value / min;\n\t                        }\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // see if ordinal is wanted\n\t            if (format.indexOf('o') > -1) {\n\t                // check for space before\n\t                if (format.indexOf(' o') > -1) {\n\t                    ord = ' ';\n\t                    format = format.replace(' o', '');\n\t                } else {\n\t                    format = format.replace('o', '');\n\t                }\n\t\n\t                ord = ord + languages[currentLanguage].ordinal(value);\n\t            }\n\t\n\t            if (format.indexOf('[.]') > -1) {\n\t                optDec = true;\n\t                format = format.replace('[.]', '.');\n\t            }\n\t\n\t            w = value.toString().split('.')[0];\n\t            precision = format.split('.')[1];\n\t            thousands = format.indexOf(',');\n\t\n\t            if (precision) {\n\t                if (precision.indexOf('[') > -1) {\n\t                    precision = precision.replace(']', '');\n\t                    precision = precision.split('[');\n\t                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n\t                } else {\n\t                    d = toFixed(value, precision.length, roundingFunction);\n\t                }\n\t\n\t                w = d.split('.')[0];\n\t\n\t                if (d.split('.')[1].length) {\n\t                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n\t                } else {\n\t                    d = '';\n\t                }\n\t\n\t                if (optDec && Number(d.slice(1)) === 0) {\n\t                    d = '';\n\t                }\n\t            } else {\n\t                w = toFixed(value, null, roundingFunction);\n\t            }\n\t\n\t            // format number\n\t            if (w.indexOf('-') > -1) {\n\t                w = w.slice(1);\n\t                neg = true;\n\t            }\n\t\n\t            if (thousands > -1) {\n\t                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n\t            }\n\t\n\t            if (format.indexOf('.') === 0) {\n\t                w = '';\n\t            }\n\t\n\t            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n\t        }\n\t    }\n\t\n\t    /************************************\n\t        Top Level Functions\n\t    ************************************/\n\t\n\t    numeral = function (input) {\n\t        if (numeral.isNumeral(input)) {\n\t            input = input.value();\n\t        } else if (input === 0 || typeof input === 'undefined') {\n\t            input = 0;\n\t        } else if (!Number(input)) {\n\t            input = numeral.fn.unformat(input);\n\t        }\n\t\n\t        return new Numeral(Number(input));\n\t    };\n\t\n\t    // version number\n\t    numeral.version = VERSION;\n\t\n\t    // compare numeral object\n\t    numeral.isNumeral = function (obj) {\n\t        return obj instanceof Numeral;\n\t    };\n\t\n\t    // This function will load languages and then set the global language.  If\n\t    // no arguments are passed in, it will simply return the current global\n\t    // language key.\n\t    numeral.language = function (key, values) {\n\t        if (!key) {\n\t            return currentLanguage;\n\t        }\n\t\n\t        if (key && !values) {\n\t            if(!languages[key]) {\n\t                throw new Error('Unknown language : ' + key);\n\t            }\n\t            currentLanguage = key;\n\t        }\n\t\n\t        if (values || !languages[key]) {\n\t            loadLanguage(key, values);\n\t        }\n\t\n\t        return numeral;\n\t    };\n\t    \n\t    // This function provides access to the loaded language data.  If\n\t    // no arguments are passed in, it will simply return the current\n\t    // global language object.\n\t    numeral.languageData = function (key) {\n\t        if (!key) {\n\t            return languages[currentLanguage];\n\t        }\n\t        \n\t        if (!languages[key]) {\n\t            throw new Error('Unknown language : ' + key);\n\t        }\n\t        \n\t        return languages[key];\n\t    };\n\t\n\t    numeral.language('en', {\n\t        delimiters: {\n\t            thousands: ',',\n\t            decimal: '.'\n\t        },\n\t        abbreviations: {\n\t            thousand: 'k',\n\t            million: 'm',\n\t            billion: 'b',\n\t            trillion: 't'\n\t        },\n\t        ordinal: function (number) {\n\t            var b = number % 10;\n\t            return (~~ (number % 100 / 10) === 1) ? 'th' :\n\t                (b === 1) ? 'st' :\n\t                (b === 2) ? 'nd' :\n\t                (b === 3) ? 'rd' : 'th';\n\t        },\n\t        currency: {\n\t            symbol: '$'\n\t        }\n\t    });\n\t\n\t    numeral.zeroFormat = function (format) {\n\t        zeroFormat = typeof(format) === 'string' ? format : null;\n\t    };\n\t\n\t    numeral.defaultFormat = function (format) {\n\t        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n\t    };\n\t\n\t    /************************************\n\t        Helpers\n\t    ************************************/\n\t\n\t    function loadLanguage(key, values) {\n\t        languages[key] = values;\n\t    }\n\t\n\t    /************************************\n\t        Floating-point helpers\n\t    ************************************/\n\t\n\t    // The floating-point helper functions and implementation\n\t    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\t\n\t    /**\n\t     * Array.prototype.reduce for browsers that don't support it\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n\t     */\n\t    if ('function' !== typeof Array.prototype.reduce) {\n\t        Array.prototype.reduce = function (callback, opt_initialValue) {\n\t            'use strict';\n\t            \n\t            if (null === this || 'undefined' === typeof this) {\n\t                // At the moment all modern browsers, that support strict mode, have\n\t                // native implementation of Array.prototype.reduce. For instance, IE8\n\t                // does not support strict mode, so this check is actually useless.\n\t                throw new TypeError('Array.prototype.reduce called on null or undefined');\n\t            }\n\t            \n\t            if ('function' !== typeof callback) {\n\t                throw new TypeError(callback + ' is not a function');\n\t            }\n\t\n\t            var index,\n\t                value,\n\t                length = this.length >>> 0,\n\t                isValueSet = false;\n\t\n\t            if (1 < arguments.length) {\n\t                value = opt_initialValue;\n\t                isValueSet = true;\n\t            }\n\t\n\t            for (index = 0; length > index; ++index) {\n\t                if (this.hasOwnProperty(index)) {\n\t                    if (isValueSet) {\n\t                        value = callback(value, this[index], index, this);\n\t                    } else {\n\t                        value = this[index];\n\t                        isValueSet = true;\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (!isValueSet) {\n\t                throw new TypeError('Reduce of empty array with no initial value');\n\t            }\n\t\n\t            return value;\n\t        };\n\t    }\n\t\n\t    \n\t    /**\n\t     * Computes the multiplier necessary to make x >= 1,\n\t     * effectively eliminating miscalculations caused by\n\t     * finite precision.\n\t     */\n\t    function multiplier(x) {\n\t        var parts = x.toString().split('.');\n\t        if (parts.length < 2) {\n\t            return 1;\n\t        }\n\t        return Math.pow(10, parts[1].length);\n\t    }\n\t\n\t    /**\n\t     * Given a variable number of arguments, returns the maximum\n\t     * multiplier that must be used to normalize an operation involving\n\t     * all of them.\n\t     */\n\t    function correctionFactor() {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        return args.reduce(function (prev, next) {\n\t            var mp = multiplier(prev),\n\t                mn = multiplier(next);\n\t        return mp > mn ? mp : mn;\n\t        }, -Infinity);\n\t    }        \n\t\n\t\n\t    /************************************\n\t        Numeral Prototype\n\t    ************************************/\n\t\n\t\n\t    numeral.fn = Numeral.prototype = {\n\t\n\t        clone : function () {\n\t            return numeral(this);\n\t        },\n\t\n\t        format : function (inputString, roundingFunction) {\n\t            return formatNumeral(this, \n\t                  inputString ? inputString : defaultFormat, \n\t                  (roundingFunction !== undefined) ? roundingFunction : Math.round\n\t              );\n\t        },\n\t\n\t        unformat : function (inputString) {\n\t            if (Object.prototype.toString.call(inputString) === '[object Number]') { \n\t                return inputString; \n\t            }\n\t            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n\t        },\n\t\n\t        value : function () {\n\t            return this._value;\n\t        },\n\t\n\t        valueOf : function () {\n\t            return this._value;\n\t        },\n\t\n\t        set : function (value) {\n\t            this._value = Number(value);\n\t            return this;\n\t        },\n\t\n\t        add : function (value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t            function cback(accum, curr, currI, O) {\n\t                return accum + corrFactor * curr;\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n\t            return this;\n\t        },\n\t\n\t        subtract : function (value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t            function cback(accum, curr, currI, O) {\n\t                return accum - corrFactor * curr;\n\t            }\n\t            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            \n\t            return this;\n\t        },\n\t\n\t        multiply : function (value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) * (curr * corrFactor) /\n\t                    (corrFactor * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 1);\n\t            return this;\n\t        },\n\t\n\t        divide : function (value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) / (curr * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback);            \n\t            return this;\n\t        },\n\t\n\t        difference : function (value) {\n\t            return Math.abs(numeral(this._value).subtract(value).value());\n\t        }\n\t\n\t    };\n\t\n\t    /************************************\n\t        Exposing Numeral\n\t    ************************************/\n\t\n\t    // CommonJS module is defined\n\t    if (hasModule) {\n\t        module.exports = numeral;\n\t    }\n\t\n\t    /*global ender:false */\n\t    if (typeof ender === 'undefined') {\n\t        // here, `this` means `window` in the browser, or `global` on the server\n\t        // add `numeral` as a global object via a string identifier,\n\t        // for Closure Compiler 'advanced' mode\n\t        this['numeral'] = numeral;\n\t    }\n\t\n\t    /*global define:false */\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t            return numeral;\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t}).call(this);\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.12fd3cd47d932f56877a.js\n **/","import './index.css';\nimport {getUsers, deleteUser} from './api/userApi';\nimport numeral from 'numeral';\n\nconst courseValue = numeral(1000).format('$0,0.00');\nconsole.log(`I would play ${courseValue} from this awesome course!`); //eslint-disable-line no-console\ngetUsers().then(result => {\n  let usersBody = \"\";\n  result.forEach(user => {\n    usersBody+= `<tr>\n        <td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\n        <td>${user.id}</td>\n        <td>${user.firstName}</td>\n        <td>${user.lastName}</td>\n        <td>${user.email}</td>\n        <td></td>\n      </tr>`;\n  });\n\n  global.document.getElementById('users').innerHTML = usersBody;\n\n  const deleteLinks = global.document.getElementsByClassName('deleteUser');\n\n  Array.from(deleteLinks, link => {\n    link.onclick = function(event) {\n      const element = event.target;\n      event.preventDefault();\n      deleteUser(element.attributes[\"date-id\"]);\n      const row = element.parentNode.parentNode;\n      row.parentNode.removeChild(row);\n    }\n  })\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import 'whatwg-fetch';\nimport getBaseUrl from './baseUrl';\n\nconst baseUrl = getBaseUrl();\n\nexport function getUsers(){\n  return get('users');\n}\nexport function deleteUser(id){\n  return del(`users/${id}`);\n}\n\nfunction del(url){\n  const request =  new Request(baseUrl + url, {\n    method: 'DELETE'\n  });\n  return fetch(request).then(onSuccess, onError);\n}\n\nfunction get(url) {\n  return fetch(baseUrl + url).then(onSuccess, onError);\n}\n\nfunction onError(error){\n  console.log(error);\n}\n\nfunction onSuccess(response){\n  return response.json();\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/whatwg-fetch/fetch.js\n ** module id = 4\n ** module chunks = 0\n **/","export default function getBaseUrl(){\n  return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\n}\n\nfunction getQueryStringParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/baseUrl.js\n **/","/*!\n * numeral.js\n * version : 1.5.3\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function () {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.3',\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral (number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n            \n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral (n, format, roundingFunction) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n._value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    // revert to number\n    function unformatNumeral (n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            bytesMultiplier = false,\n            power;\n\n        if (string.indexOf(':') > -1) {\n            n._value = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._value = 0;\n            } else {\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 0; power <= suffixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\n                // round if we are talking about bytes\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n            }\n        }\n        return n._value;\n    }\n\n    function formatCurrency (n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage (n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n        \n        if (output.indexOf(')') > -1 ) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime (n) {\n        var hours = Math.floor(n._value/60/60),\n            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function unformatTime (string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n    function formatNumber (value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            } else if (format.indexOf('+') > -1) {\n                signed = true;\n                format = format.replace(/\\+/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check if abbreviation is specified\n                abbrK = format.indexOf('aK') >= 0;\n                abbrM = format.indexOf('aM') >= 0;\n                abbrB = format.indexOf('aB') >= 0;\n                abbrT = format.indexOf('aT') >= 0;\n                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                for (power = 0; power <= suffixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power+1);\n\n                    if (value >= min && value < max) {\n                        bytes = bytes + suffixes[power];\n                        if (min > 0) {\n                            value = value / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(value);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            w = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(value, null, roundingFunction);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function (input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        }\n\n        return new Numeral(Number(input));\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function (obj) {\n        return obj instanceof Numeral;\n    };\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function (key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n\n        if (key && !values) {\n            if(!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n    \n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function (key) {\n        if (!key) {\n            return languages[currentLanguage];\n        }\n        \n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n        \n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function (format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function (format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    /**\n     * Array.prototype.reduce for browsers that don't support it\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n     */\n    if ('function' !== typeof Array.prototype.reduce) {\n        Array.prototype.reduce = function (callback, opt_initialValue) {\n            'use strict';\n            \n            if (null === this || 'undefined' === typeof this) {\n                // At the moment all modern browsers, that support strict mode, have\n                // native implementation of Array.prototype.reduce. For instance, IE8\n                // does not support strict mode, so this check is actually useless.\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n            \n            if ('function' !== typeof callback) {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var index,\n                value,\n                length = this.length >>> 0,\n                isValueSet = false;\n\n            if (1 < arguments.length) {\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n\n            for (index = 0; length > index; ++index) {\n                if (this.hasOwnProperty(index)) {\n                    if (isValueSet) {\n                        value = callback(value, this[index], index, this);\n                    } else {\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n\n            if (!isValueSet) {\n                throw new TypeError('Reduce of empty array with no initial value');\n            }\n\n            return value;\n        };\n    }\n\n    \n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function (prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n        return mp > mn ? mp : mn;\n        }, -Infinity);\n    }        \n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone : function () {\n            return numeral(this);\n        },\n\n        format : function (inputString, roundingFunction) {\n            return formatNumeral(this, \n                  inputString ? inputString : defaultFormat, \n                  (roundingFunction !== undefined) ? roundingFunction : Math.round\n              );\n        },\n\n        unformat : function (inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') { \n                return inputString; \n            }\n            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n        },\n\n        value : function () {\n            return this._value;\n        },\n\n        valueOf : function () {\n            return this._value;\n        },\n\n        set : function (value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            \n            return this;\n        },\n\n        multiply : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);            \n            return this;\n        },\n\n        difference : function (value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return numeral;\n        });\n    }\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/numeral/numeral.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}